;; -*- mode: scheme; coding: utf-8 -*-
;; Copyright (C) 2011 GÃ¶ran Weinholt <goran@weinholt.se>

;; Permission is hereby granted, free of charge, to any person obtaining a copy
;; of this software and associated documentation files (the "Software"), to deal
;; in the Software without restriction, including without limitation the rights
;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;; copies of the Software, and to permit persons to whom the Software is
;; furnished to do so, subject to the following conditions:

;; The above copyright notice and this permission notice shall be included in
;; all copies or substantial portions of the Software.

;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
;; THE SOFTWARE.

;; Definitions for primitive operations

(define *primitives* '())
(define *operations* '())

;; Primitives check the argument list of the primitive and then return
;; a operation name.
(define (add-primitive! name proc)
  (set! *primitives* (cons (cons name proc)
                           *primitives*)))

(define-macro (define-primitive name/args . body)
  (list 'add-primitive! (list 'quote (car name/args))
        (append (list 'lambda (cdr name/args))
                body)))

;; Operations are written in Go and are used to implement the primitives.
(define (add-operation! name proc)
  (set! *operations* (cons (cons name proc)
                           *operations*)))

(define-macro (define-operation name . body)
  (list 'add-operation! (list 'quote name)
        (append (list 'lambda '())
                body)))

(define-macro (define-call opname funcname args)
  (let ((opname* (string->symbol
                  (string-append (symbol->string opname)
                                 "/" (number->string args)))))
    (list 'begin
          (list 'define-operation opname* (list 'normal-call funcname args))
          (list 'define-primitive (list opname 'args)
                (list 'if (list '= (list 'length 'args) args)
                      (list 'quote opname*)
                      (list 'quote 'ERROR))))))


(define (shift-args) "code = cdr(code)")
(define (argn n)
  (case n
    ((0) "ev(car(code), false, lexenv)")
    ((1) "ev(car(cdr(code)), false, lexenv)")
    (else
     (error 'argn "TODO: generalize to n" n))))

(define (normal-call funcname args)
  (let lp ((i 0) (ret '()) (formals ""))
    (if (= i args)
        (reverse (cons (string-append "return " funcname "(" formals ")") ret))
        (lp (+ i 1)
            (cons (string-append
                   "arg" (number->string i)
                   " := " (argn 0)
                   (if (< i (- args 1))
                       (string-append ";" (shift-args))
                       ""))
                  ret)
            (string-append formals (if (positive? i) ", arg" "arg")
                           (number->string i))))))

(define (print-operations p)
  (display "// This file is part of conscheme\n" p)
  (display "// Automatically generated by compiler/primitives.scm\n" p)
  (display "package conscheme\n" p)
  (display "import \"fmt\"\n" p)
  (display "import \"os\"\n" p)
  (display "func evprim(primop string, code Obj, lexenv map[string]Obj) Obj {\n" p)
  (display "\tswitch primop {\n" p)
  (for-each (lambda (op)
              (display (string-append "\tcase \"" (symbol->string (car op)) "\":\n") p)
              (for-each (lambda (line)
                          (display (string-append "\t\t" line "\n") p))
                        ((cdr op))))
            *operations*)
  (display "\tdefault:\n" p)
  (display "\t\tfmt.Fprintf(os.Stderr, \"Please regenerate primitives.go\\n\")\n" p)
  (display "\t\tpanic(fmt.Sprintf(\"Unimplemented primitive: %s\",primop))\n" p)
  (display "\t}\n" p)
  (display "\tpanic(fmt.Sprintf(\"Fell off the edge in evprim(): %s\",primop))\n" p)
  (display "}\n" p))

;; Booleans

(define-call boolean? "boolean_p" 1)
(define-call not "not" 1)

;; Pairs

(define-call pair? "pair_p" 1)
(define-call cons "Cons" 2)
(define-call car "car" 1)
(define-call cdr "cdr" 1)
(define-call length "Length" 1)
(define-call set-car! "set_car_ex" 2)
(define-call set-cdr! "set_cdr_ex" 2)

;; Symbols

(define-call symbol? "symbol_p" 1)

;; Characters

(define-call char? "char_p" 1)
(define-call char->integer "char_to_integer" 1)

;; Vectors

(define-call vector? "vector_p" 1)

;; Numbers

(define-call number? "number_p" 1)
(define-call = "number_equal" 2)        ; TODO: = is n-ary
(define-call $number->string "_number_to_string" 2)
(define-call $+ "number_add" 2)
(define-call $/ "number_divide" 2)
(define-call $- "number_subtract" 2)

(define-operation least-fixnum/0 (list "return Make_fixnum(fixnum_min)"))
(define-primitive (least-fixnum args)
  (if (= (length args) 0)
      'least-fixnum/0
      'ERROR))

(define-operation greatest-fixnum/0 (list "return Make_fixnum(fixnum_max)"))
(define-primitive (greatest-fixnum args)
  (if (= (length args) 0)
      'greatest-fixnum/0
      'ERROR))


;; Strings

(define-call string? "string_p" 1)
(define-call string-length "String_length" 1)
(define-call string-ref "String_ref" 2)

(define-operation make-string/1
   (list (string-append "return Make_string(" (argn 0) ",Make_char("
                        (number->string (char->integer #\space)) "))")))
(define-operation make-string/2 (normal-call "Make_string" 2))
(define-primitive (make-string args)
  (case (length args)
    ((1) 'make-string/1)
    ((2) 'make-string/2)
    (else 'ERROR)))


;; Ports

;; (define-call port? "port_p" 1)

;; Misc

;; (define-call procedure? "procedure_p" 1)

(define-operation unspecified/0 (list "return Void"))
(define-primitive (unspecified args)
  (if (= (length args) 0)
      'unspecified/0
      'ERROR))

(define-operation eof-object/0 (list "return Eof"))
(define-primitive (eof-object args)
  (if (= (length args) 0)
      'eof-object/0
      'ERROR))

(define-operation eq?/2
   (list (string-append "if " (argn 0) " == " (argn 1) " {")
         "\treturn True"
         "} else {"
         "\treturn False"
         "}"))
(define-primitive (eq? args)
  (if (= (length args) 2)
      'eq?/2
      'ERROR))

(define-operation exit/1
  (list (string-append "os.Exit(number_to_int(" (argn 0) "))")))
(define-primitive (exit args)
  (case (length args)
    ((1) 'exit/1)
    (else 'ERROR)))

(define-operation command-line/0 (normal-call "Command_line" 0))
(define-primitive (command-line args)
  (if (= (length args) 0)
      'command-line/0
      'ERROR))

;; I/O

(define-operation display/1 (normal-call "Display" 1))
(define-primitive (display args)
  ;; TODO: display with the port argument. write display in scheme instead
  (if (= (length args) 1)
      'display/1
      'ERROR))

(define-operation write/1 (normal-call "Write" 1))
(define-primitive (write args)
  ;; TODO: the port argument. write in scheme instead
  (if (= (length args) 1)
      'write/1
      'ERROR))



;;; A compiler pass

(define (lookup-primop x)
  (let ((x (assq x *primitives*)))
    (if x (cdr x) #f)))

(define (primcall primop name args)
  (let ((call (primop args)))
    (cond ((eq? call 'ERROR)
           (display "Warning: wrong number of arguments to built-in procedure:\n"
                    (current-error-port))
           (pretty-print (cons name args) (current-error-port))
           (newline (current-error-port))
           (primops (list 'begin (cons 'begin args)
                          (list 'error (list 'quote "Wrong number of arguments")
                                (list 'quote name)))))
          (else
           (cons '$primcall (cons call args))))))

;; The input is from aconv. The output language differentiates between
;; calls to known primitives and calls to closures.
(define (primops x)
  (if (symbol? x)
      (if (lookup-primop x)
          ;; TODO: generate lambda expressions for primitives
          (list '$primitive x)
          x)
      (case (car x)
        ((lambda)
         (list 'lambda (lambda-formals x) (primops (lambda-body x))))
        ((if)
         (cons 'if (map (lambda (x) (primops x)) (cdr x))))
        ((quote) x)
        ((define)
         (list 'define (cadr x) (primops (caddr x))))
        ((begin)
         (cons 'begin (map (lambda (x) (primops x)) (cdr x))))
        ((set!)
         (list 'set! (set!-name x) (primops (set!-expression x))))
        (else
         (let ((primop (and (pair? x) (lookup-primop (car x)))))
           (if primop
               (primcall primop (car x) (map (lambda (x) (primops x)) (cdr x)))
               (cons '$funcall (map (lambda (x) (primops x)) x))))))))
